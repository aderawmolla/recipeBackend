version: "3.6"
services:
  golang_app:
    container_name: golang_app
    network_mode: host
    build:
      dockerfile: golang.dockerfile
      context: .
      args:
        - GO_APP_PORT=${GO_APP_PORT}
    restart: always
    environment:
      - GO_APP_PORT=${GO_APP_PORT}
      - GO_ENV=${GO_ENV:-development}
  
  postgres:
    image: postgres:15
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
  
  graphql-engine:
    image: hasura/graphql-engine:v2.40.0
    network_mode: host
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: ${HASURA_GRAPHQL_METADATA_DATABASE_URL}
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: ${PG_DATABASE_URL}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_URL: ${HASURA_GRAPHQL_URL}
      HASURA_GRAPHQL_DEV_MODE: "true"
      ACTION_BASE_URL: ${ACTION_BASE_URL}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
    depends_on:
      postgres:
        condition: service_healthy
      data-connector-agent:
        condition: service_healthy
  
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.40.0
    network_mode: host
    restart: always
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s

volumes:
  db_data:
